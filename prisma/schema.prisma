datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TournamentMode {
  LEAGUE
  KNOCKOUT
  LEAGUE_PLAYOFFS
}

enum StageKind {
  GROUP
  PLAYOFF
}

enum Position {
  GK
  DEF
  MID
  FWD
}

enum HealthStatus {
  HEALTHY
  INJURED
}

enum MatchStatus {
  SCHEDULED
  LIVE
  FINISHED
}

enum MatchEventType {
  GOAL
  ASSIST
  OWN_GOAL
  CARD
}

enum CardKind {
  YELLOW
  RED
  SECOND_YELLOW
}

enum VotingStatus {
  NOT_STARTED
  OPEN
  CLOSED
}

enum VotingClosePolicyType {
  ABSOLUTE_DEADLINE
  NEXT_ROUND_START
  MANUAL
}

model Tournament {
  id String @id @default(cuid())
  name String
  mode TournamentMode
  description String?
  additionalInfo String?
  season String?
  startDate DateTime?
  endDate DateTime?
  timezone String?
  venue String?
  venueAddress String?
  venueImageUrl String?
  groups Group[]
  stages Stage[]
  teams  Team[]
  @@map("tournaments")
}

model Group {
  id String @id @default(cuid())
  name String
  teamIds String[]
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  matches    Match[]
  @@map("groups")
}

model Stage {
  id String @id @default(cuid())
  name String
  kind StageKind
  order Int
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  matches  Match[]
  @@map("stages")
}

model Team {
  id           String   @id @default(cuid())   
  name         String
  logo         String?                          
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  players      Player[]
  homeMatches  Match[]  @relation("HomeTeam")
  awayMatches  Match[]  @relation("AwayTeam")
}

model Player {
  id           String   @id @default(cuid())   
  team         Team     @relation(fields: [teamId], references: [id])
  teamId       String
  name         String
  position     Position
  shirtNumber  Int?
  healthStatus HealthStatus
}

model Match {
  id          String      @id @default(cuid())
  stage       Stage       @relation(fields: [stageId], references: [id])
  stageId     String
  group       Group?      @relation(fields: [groupId], references: [id])
  groupId     String?
  round       Int?
  index       Int?
  date        DateTime
  status      MatchStatus
  homeTeam    Team?      @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId  String?
  awayTeam    Team?        @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId  String?
  homeSourceKind SlotSource?
  homeSourceRef String?
  awaySourceKind SlotSource?
  awaySourceRef String?
  homeScore   Int?
  awayScore   Int?
  homeGKIds   String[]
  awayGKIds   String[]
  events      MatchEvent[]
  voting      Voting?     @relation("MatchVoting")
  @@unique([stageId, round, index])
  @@map("matches")
}

model MatchEvent {
  id       String         @id @default(cuid())
  match    Match          @relation(fields: [matchId], references: [id])
  matchId  String
  minute   Int
  type     MatchEventType
  playerId String
  teamId   String
  card     CardKind?
  @@map("match_events")
}

model Voting {
  matchId   String   @id
  match     Match    @relation("MatchVoting", fields: [matchId], references: [id], onDelete: Cascade)
  status    VotingStatus @default(NOT_STARTED)
  closeType VotingClosePolicyType?
  closesAt  DateTime?
  closedAt  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  summaries MVPVoteSummary[] @relation("VotingSummaries")
}


model MVPVoteSummary {
  id       String @id @default(cuid())
  matchId  String
  playerId String
  votes    Int    @default(0)
  match    Voting @relation("VotingSummaries", fields: [matchId], references: [matchId], onDelete: Cascade)
  @@unique([matchId, playerId])
}

enum UserRole {
  USER
  CAPTAIN
  ADMIN
}

model User {
  id String @id @default(cuid())
  email String @unique
  name String?
  avatarUrl String?
  role UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MVPVote {
  id String @id @default(cuid())
  matchId String
  playerId String
  voterHash String
  voterType String
  createdAt DateTime @default(now())
  @@unique([matchId, voterHash])
  @@index([matchId, playerId])
}

enum SlotSource {
  TEAM
  WINNER
  LOSER
}

model IdCounter {
  key   String @id
  value Int
  @@map("id_counters")
}


